package chichat;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.net.*;
import java.sql.Connection;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;


/**
 *
 * @author Dell
 */
public class mainFrame extends javax.swing.JFrame {

    /**
     * Creates new form mainFrame
     */
             
     public mainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jDialog2 = new javax.swing.JDialog();
        jDialog3 = new javax.swing.JDialog();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jTextField1 = new javax.swing.JTextField();
        mainpan = new javax.swing.JPanel();
        join = new javax.swing.JButton();
        create = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        account = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        about = new javax.swing.JMenu();
        option = new javax.swing.JMenu();
        logout = new javax.swing.JMenuItem();
        exit = new javax.swing.JMenuItem();

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jDialog2Layout = new javax.swing.GroupLayout(jDialog2.getContentPane());
        jDialog2.getContentPane().setLayout(jDialog2Layout);
        jDialog2Layout.setHorizontalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog2Layout.setVerticalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jDialog3Layout = new javax.swing.GroupLayout(jDialog3.getContentPane());
        jDialog3.getContentPane().setLayout(jDialog3Layout);
        jDialog3Layout.setHorizontalGroup(
            jDialog3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog3Layout.setVerticalGroup(
            jDialog3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        jMenuItem5.setText("jMenuItem5");

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 204, 204));
        setPreferredSize(new java.awt.Dimension(407, 600));
        setResizable(false);

        jTextField1.setText("jTextField1");

        mainpan.setBackground(new java.awt.Color(215, 234, 253));

        join.setText("Join");
        join.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                joinActionPerformed(evt);
            }
        });

        create.setText("Create");
        create.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainpanLayout = new javax.swing.GroupLayout(mainpan);
        mainpan.setLayout(mainpanLayout);
        mainpanLayout.setHorizontalGroup(
            mainpanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainpanLayout.createSequentialGroup()
                .addContainerGap(271, Short.MAX_VALUE)
                .addComponent(join)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(create)
                .addGap(16, 16, 16))
        );
        mainpanLayout.setVerticalGroup(
            mainpanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainpanLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainpanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(join)
                    .addComponent(create))
                .addContainerGap(505, Short.MAX_VALUE))
        );

        jMenuBar1.setBackground(new java.awt.Color(0, 51, 51));
        jMenuBar1.setForeground(new java.awt.Color(0, 51, 51));
        jMenuBar1.setPreferredSize(new java.awt.Dimension(219, 81));

        jMenu2.setBackground(new java.awt.Color(0, 51, 51));
        jMenu2.setForeground(new java.awt.Color(153, 153, 255));
        jMenu2.setText("Inbox");
        jMenu2.setPreferredSize(new java.awt.Dimension(91, 19));
        jMenuBar1.add(jMenu2);

        jMenu4.setBackground(new java.awt.Color(0, 51, 51));
        jMenu4.setForeground(new java.awt.Color(153, 153, 255));
        jMenu4.setText("Profile");
        jMenu4.setPreferredSize(new java.awt.Dimension(91, 19));

        account.setText("Account");
        account.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accountActionPerformed(evt);
            }
        });
        jMenu4.add(account);

        jMenuItem4.setText("peoples");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem4);

        jMenuBar1.add(jMenu4);

        about.setBackground(new java.awt.Color(0, 51, 51));
        about.setForeground(new java.awt.Color(153, 153, 255));
        about.setText("About");
        about.setPreferredSize(new java.awt.Dimension(91, 19));
        jMenuBar1.add(about);

        option.setBackground(new java.awt.Color(0, 51, 51));
        option.setForeground(new java.awt.Color(153, 153, 255));
        option.setText("Options");
        option.setPreferredSize(new java.awt.Dimension(91, 19));

        logout.setBackground(new java.awt.Color(0, 51, 51));
        logout.setForeground(new java.awt.Color(204, 204, 255));
        logout.setText("signout");
        logout.setPreferredSize(new java.awt.Dimension(91, 19));
        logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutActionPerformed(evt);
            }
        });
        option.add(logout);

        exit.setBackground(new java.awt.Color(0, 51, 51));
        exit.setForeground(new java.awt.Color(204, 204, 255));
        exit.setActionCommand("sign_out");
        exit.setLabel("exit");
        exit.setPreferredSize(new java.awt.Dimension(91, 19));
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });
        option.add(exit);

        jMenuBar1.add(option);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainpan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainpan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
Connection cn=null;
Statement state=null;
    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutActionPerformed
       loginForm login=new loginForm();
      this.dispose();
      login.setVisible(true);    // TODO add your handling code here:
    }//GEN-LAST:event_logoutActionPerformed
    private void accountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accountActionPerformed
         // TODO add your handling code here:
                 
    }//GEN-LAST:event_accountActionPerformed

    static Socket conn;
    JTextField NewMsg;
    JTextArea ChatHistory;
    JButton Send;
     static ServerSocket server;
	
    private void joinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_joinActionPerformed
        // TODO add your handling code here:
                mainpan.removeAll();
                mainpan.repaint();
                NewMsg = new JTextField();
		ChatHistory = new JTextArea();
		Send = new JButton("Send");
		this.setSize(500, 600);
		this.setVisible(true);
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		mainpan.setLayout(null);
		this.add(mainpan);
		ChatHistory.setBounds(10, 10, 400, 260);
		mainpan.add(ChatHistory);
		NewMsg.setBounds(10, 300, 200, 30);
		mainpan.add(NewMsg);
		Send.setBounds(210, 300, 100, 30);
		mainpan.add(Send);
                ChatHistory.setText("Waiting for Server");
                this.setTitle("Client");     
                Send.addActionListener((ActionListener) this);
                try {
                 conn = new Socket(InetAddress.getLocalHost(), 2000);
                 } catch (IOException ex) {
                    try {
                        conn = new Socket(InetAddress.getLocalHost(), 3000);
                    } catch (IOException ex1) {
                        ChatHistory.setText(ChatHistory.getText() + '\n'
						+ "Network Error");
                    }
         }

		/*
		 * for remote pc use ip address of server with function
		 * InetAddress.getByName("Provide ip here")
		 * ChatHistory.setText("Connected to Server");
		 */

		 ChatHistory.setText("Connected to Server");
                    while (true) {
			try {
				DataInputStream dis = new DataInputStream(conn.getInputStream());
				String string = dis.readUTF();
				ChatHistory.setText(ChatHistory.getText() + '\n' + "Server:"
						+ string);
			} catch (Exception e1) {
				ChatHistory.setText(ChatHistory.getText() + '\n'
						+ "Message sending fail:Network Error");			
		}
	

                }
	
    }//GEN-LAST:event_joinActionPerformed

    private void createActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createActionPerformed
        // TODO add your handling code here:
                mainpan.removeAll();
                mainpan.repaint();
                /*
		NewMsg = new JTextField();
		ChatHistory = new JTextArea();
		Send = new JButton("Send");
                this.setSize(500, 600);
		this.setVisible(true);
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		this.setLayout(null);
		this.add(mainpan);
		ChatHistory.setBounds(10, 20, 400, 260);
		mainpan.add(ChatHistory);
		NewMsg.setBounds(10, 300, 340, 30);
		mainpan.add(NewMsg);
		Send.setBounds(360, 300, 100, 30);
		mainpan.add(Send);
		ChatHistory.setText("Waiting for Client");
                ChatHistory.setForeground(Color.red);    
                this.setTitle("Client");  
                     	Send.addActionListener(new ActionListener(){
                public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
                if ((e.getSource() == Send) && (!"".equals(NewMsg.getText()))) {
			ChatHistory.getText();
			try {
				DataOutputStream dos = new DataOutputStream(
				conn.getOutputStream());
				dos.writeUTF(NewMsg.getText());
			} catch (Exception e1) {
                        }
			NewMsg.setText("");
		}
                }       
                
                });
	       try {		
             server = new ServerSocket(2000, 1, InetAddress.getLocalHost());
             conn = server.accept();
            ChatHistory.setText(ChatHistory.getText() + '\n' + "Client Found");
                } catch (IOException ex) {
             Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
         }
          
		while (true) {
			try {
				DataInputStream dis = new DataInputStream(conn.getInputStream());
				String string = dis.readUTF();
				ChatHistory.setText(ChatHistory.getText() + '\n' + "Client:"
						+ string);
			} catch (Exception e1) {
				ChatHistory.setText(ChatHistory.getText() + '\n'
						+ "Message sending fail:Network Error");
				
			}
		}
                
                
                */
        
                  NewMsg = new JTextField();
		ChatHistory = new JTextArea();
		Send = new JButton("Send");
		this.setSize(500, 600);
		this.setVisible(true);
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		mainpan.setLayout(null);
		this.add(mainpan);
		ChatHistory.setBounds(10, 10, 400, 260);
		mainpan.add(ChatHistory);
		NewMsg.setBounds(10, 300, 200, 30);
		mainpan.add(NewMsg);
		Send.setBounds(210, 300, 100, 30);
		mainpan.add(Send);
		this.setTitle("Server");
                ChatHistory.setText("Waiting for Client");
		Send.addActionListener((ActionListener) this);
                 try {
                server = new ServerSocket(2000, 10 , InetAddress.getLocalHost());
             	conn = server.accept();
                 } catch (IOException ex) {
                         Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
		ChatHistory.setText(ChatHistory.getText() + 'n' + "Client Found");
		while (true) {
			try {
				DataInputStream dis = new DataInputStream(conn.getInputStream());
				String string = dis.readUTF();
				ChatHistory.setText(ChatHistory.getText() + 'n' + "Client:"
						+ string);
			} catch (Exception e1) {
				ChatHistory.setText(ChatHistory.getText() + 'n'
						+ "Message sending fail:Network Error");
				
			}
		}
        
    }//GEN-LAST:event_createActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem4ActionPerformed
    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        // TODO add your handling code here:
           System.exit(WIDTH);
    }//GEN-LAST:event_exitActionPerformed
                                            

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
  try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mainFrame().setVisible(true);
            }
        });
    }
       
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu about;
    private javax.swing.JMenuItem account;
    private javax.swing.JButton create;
    private javax.swing.JMenuItem exit;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JDialog jDialog2;
    private javax.swing.JDialog jDialog3;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JButton join;
    private javax.swing.JMenuItem logout;
    private javax.swing.JPanel mainpan;
    private javax.swing.JMenu option;
    // End of variables declaration//GEN-END:variables
    }